{"version":3,"sources":["Entities/RequestStatus.js","Redux/UsersRedux.js","Redux/PostsRedux.js","Entities/Endpoints.js","API/UsersAPI.js","Sagas/UsersSaga.js","API/PostsAPI.js","Sagas/PostsSaga.js","Sagas/index.js","Redux/index.js","index.js","Entities/RoutePaths.js","Components/Navbar.js","Containers/App.js","Containers/Login.js","Utils/util.js","Entities/UsersTypes.js","Components/PostsList.js","Containers/Posts.js","Containers/Home.js","Components/UsersTable.js","Containers/Users.js","Containers/PostDetails.js","routes.js"],"names":["INITIAL","INPROGRESS","OK","ERROR","INITIAL_STATE","Immutable","users","fetchUsersRequestStatus","RequestStatus","fetchUsersErrorMessage","createActions","fetchUsers","setFetchUsersRequestStatus","storeUsers","storeUsersErrorMessage","Types","Creators","UsersTypes","reducer","createReducer","FETCH_USERS","state","merge","SET_FETCH_USERS_REQUEST_STATUS","status","STORE_USERS","posts","fetchPostsRequestStatus","fetchPostsErrorMessage","postId","postDetails","fetchPostDetailsRequestStatus","fetchPostDetailsErrorMessage","fetchPosts","setFetchPostsRequestStatus","storePosts","storePostsErrorMessage","setPostId","fetchPostDetails","setFetchPostDetailsRequestStatus","storePostDetails","storePostDetailsErrorMessage","PostsTypes","FETCH_POSTS","SET_FETCH_POSTS_REQUEST_STATUS","STORE_POSTS","SET_POST_ID","FETCH_POST_DETAILS","SET_FETCH_POST_DETAILS_REQUEST_STATUS","STORE_POST_DETAILS","API_ENDPOINT","url","Endpoints","axios","create","baseURL","headers","get","then","response","catch","err","call","UsersAPI","put","ProfileInfoActions","all","data","API","PostsAPI","PostsAction","root","takeLatest","Component","reducers","history","combineReducers","router","connectRouter","usersData","UsersRedux","postsData","PostsRedux","POSTS","USERS","HOME","LOGIN","LOG_OUT","withRouter","Nav","fill","defaultActiveKey","RoutePaths","className","Item","to","title","activeClassName","App","Container","fluid","Navbar","Col","as","sm","xs","md","xl","this","props","children","PureComponent","connect","disabledControls","dispatch","fetchProfile","ProfileInfoAction","setFetchProfileRequestStatus","storeProfile","profile","navigateTo","path","params","push","Login","Authenticated","localStorage","getItem","loginEmail","password","isValidEmail","validated","isInvalidCredentials","handleLoginData","name","value","setState","isValidEmailAddress","match","handleSubmit","trim","filter","user","email","username","length","setItem","JSON","stringify","window","location","reload","clear","Spinner","animation","variant","Row","Card","tyle","width","Body","Form","noValidate","onSubmit","submitLogin","Group","controlId","Label","Control","type","onChange","target","onBlur","required","placeholder","Feedback","Text","Button","size","onClick","UsersActions","cloneData","parse","SEARCH_PLACEHOLDER","PostsList","useState","searchText","setSearchText","postList","searchPattern","RegExp","post","test","handlePostsFilter","map","index","Title","body","id","pathname","Posts","isToggleEditProfile","handlePostViewDetail","onPostClick","PostsActions","Home","handlePageChange","page","prevProps","prevFetchUsersRequestStatus","UsersTable","usersList","handleUserFilter","Table","striped","bordered","hover","phone","company","Users","PostDetails","obj","Object","entries","constructor","Subtitle","CarlTestRouter","loginClicked","getRouting","exact","component","createBrowserHistory","store","rootReducer","rootSaga","sagaMiddleware","createSagaMiddleware","historyMiddleware","routerMiddleware","enchancer","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","applyMiddleware","createStore","run","configureStore","app","document","getElementById","ReactDOM","render","StrictMode","context","ReactReduxContext","Math","random"],"mappings":"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","file":"static/js/main.0972584e.chunk.js","sourcesContent":["export const INITIAL = 'initial'\r\nexport const INPROGRESS = 'inprogress'\r\nexport const OK = 'ok'\r\nexport const ERROR = 'error'\r\nexport const FORBIDDEN = 'forbidden'\r\nexport const UNAUTHORIZED = 'unauthorized'\r\nexport const INTERMIDIATE = 'intermidiate'\r\n","import Immutable from 'seamless-immutable'\r\nimport { createReducer, createActions } from 'reduxsauce'\r\n\r\nimport * as RequestStatus from '../Entities/RequestStatus'\r\n\r\nexport const INITIAL_STATE = Immutable({\r\n    users: [],\r\n    fetchUsersRequestStatus: RequestStatus.INITIAL,\r\n    fetchUsersErrorMessage: ''\r\n})\r\n\r\nconst { Types, Creators } = createActions({\r\n    fetchUsers: [],\r\n    setFetchUsersRequestStatus: ['status'],\r\n    storeUsers: ['users'],\r\n    storeUsersErrorMessage: ['error']\r\n})\r\n\r\nexport const UsersTypes = Types\r\n\r\nexport default Creators\r\n\r\n/**\r\n * Listeners\r\n */\r\n\r\nexport const fetchUsers = state => state.merge({ fetchUsersRequestStatus: RequestStatus.INPROGRESS })\r\n\r\nexport const setFetchUsersRequestStatus = (state, { status }) => state.merge({ fetchUsersRequestStatus: status })\r\nexport const storeUsers = (state, { users }) => state.merge({ users })\r\n\r\nexport const storeUserInfoErrorMessage = (state, { error }) => state.merge({ userInfoErrorMessage: error })\r\n\r\n/**\r\n * ACTIONS\r\n */\r\nexport const reducer = createReducer(INITIAL_STATE, {\r\n    [Types.FETCH_USERS]: fetchUsers,\r\n    [Types.SET_FETCH_USERS_REQUEST_STATUS]: setFetchUsersRequestStatus,\r\n    [Types.STORE_USERS]: storeUsers\r\n})\r\n","import Immutable from 'seamless-immutable'\r\nimport { createReducer, createActions } from 'reduxsauce'\r\n\r\nimport * as RequestStatus from '../Entities/RequestStatus'\r\n\r\nexport const INITIAL_STATE = Immutable({\r\n    posts: [],\r\n    fetchPostsRequestStatus: RequestStatus.INITIAL,\r\n    fetchPostsErrorMessage: '',\r\n    postId:'',\r\n    postDetails: {},\r\n    fetchPostDetailsRequestStatus: RequestStatus.INITIAL,\r\n    fetchPostDetailsErrorMessage: ''\r\n})\r\n\r\nconst { Types, Creators } = createActions({\r\n    fetchPosts: [],\r\n    setFetchPostsRequestStatus: ['status'],\r\n    storePosts: ['posts'],\r\n    storePostsErrorMessage: ['error'],\r\n\r\n    setPostId: ['postId'],\r\n    fetchPostDetails: ['postId'],\r\n    setFetchPostDetailsRequestStatus: ['status'],\r\n    storePostDetails: ['postDetails'],\r\n    storePostDetailsErrorMessage: ['error']\r\n})\r\n\r\nexport const PostsTypes = Types\r\n\r\nexport default Creators\r\n\r\n/**\r\n * Listeners\r\n */\r\n\r\nexport const fetchPosts = state => state.merge({ fetchPostsRequestStatus: RequestStatus.INPROGRESS })\r\nexport const setFetchPostsRequestStatus = (state, { status }) => state.merge({ fetchPostsRequestStatus: status })\r\nexport const storePosts = (state, { posts }) => state.merge({ posts })\r\nexport const storePostsErrorMessage = (state, { error }) => state.merge({ fetchPostsErrorMessage: error })\r\n\r\nexport const setPostId = (state, { postId }) => state.merge({postId})\r\nexport const fetchPostDetails = state => state.merge({ fetchPostDetailsRequestStatus: RequestStatus.INPROGRESS })\r\nexport const setFetchPostDetailsRequestStatus = (state, { status }) => state.merge({ fetchPostDetailsRequestStatus: status })\r\nexport const storePostDetails = (state, { postDetails }) => state.merge({ postDetails })\r\nexport const storePostDetailsErrorMessage = (state, { error }) => state.merge({ fetchPostsErrorMessage: error })\r\n\r\n/**\r\n * ACTIONS\r\n */\r\nexport const reducer = createReducer(INITIAL_STATE, {\r\n    [Types.FETCH_POSTS]: fetchPosts,\r\n    [Types.SET_FETCH_POSTS_REQUEST_STATUS]: setFetchPostsRequestStatus,\r\n    [Types.STORE_POSTS]: storePosts,\r\n    [Types.SET_POST_ID]: setPostId,\r\n    [Types.FETCH_POST_DETAILS]: fetchPostDetails,\r\n    [Types.SET_FETCH_POST_DETAILS_REQUEST_STATUS]: setFetchPostDetailsRequestStatus,\r\n    [Types.STORE_POST_DETAILS]: storePostDetails\r\n})\r\n","export const API_ENDPOINT = 'https://jsonplaceholder.typicode.com/'\r\n\r\nexport const GET_USERS = '/users'\r\nexport const GET_POSTS = '/posts'\r\nexport const GET_POST_DETAILS = '/posts/'","import axios from 'axios'\r\n\r\nimport * as Endpoints from '../Entities/Endpoints'\r\n\r\nexport const API = url => axios.create({\r\n    baseURL: url,\r\n    headers: {\r\n        'Accept-Language': 'en-US'\r\n    }\r\n})\r\n\r\nexport const fetchUsers = () =>\r\n    API(Endpoints.API_ENDPOINT)\r\n        .get(Endpoints.GET_USERS)\r\n        .then(response => response)\r\n        .catch(err => ({ err }))","import { all, put, call } from 'redux-saga/effects'\r\n\r\nimport * as UsersAPI from '../API/UsersAPI'\r\nimport * as RequestStatus from '../Entities/RequestStatus'\r\nimport ProfileInfoActions from '../Redux/UsersRedux'\r\n\r\nexport function * fetchUsers () {\r\n    const response = yield call(UsersAPI.fetchUsers)\r\n\r\n    if (response.err) {\r\n        yield put(ProfileInfoActions.setFetchUsersRequestStatus(RequestStatus.ERROR))\r\n    } else {\r\n        yield all([\r\n            put(ProfileInfoActions.storeUsers(response.data)),\r\n            put(ProfileInfoActions.setFetchUsersRequestStatus(RequestStatus.OK))\r\n        ])\r\n    }\r\n}","import axios from 'axios'\r\n\r\nimport * as Endpoints from '../Entities/Endpoints'\r\n\r\nexport const API = url => axios.create({\r\n    baseURL: url,\r\n    headers: {\r\n        'Accept-Language': 'en-US'\r\n    }\r\n})\r\n\r\nexport const fetchPosts = () =>\r\n    API(Endpoints.API_ENDPOINT)\r\n        .get(Endpoints.GET_POSTS)\r\n        .then(response => response)\r\n        .catch(err => ({ err }))\r\n\r\nexport const fetchPostDetails = ({ postId }) =>\r\nAPI(Endpoints.API_ENDPOINT)\r\n    .get(Endpoints.GET_POST_DETAILS + postId)\r\n    .then(response => response)\r\n    .catch(err => ({ err }))","import { all, put, call } from 'redux-saga/effects'\r\n\r\nimport * as PostsAPI from '../API/PostsAPI'\r\nimport * as RequestStatus from '../Entities/RequestStatus'\r\nimport PostsAction from '../Redux/PostsRedux'\r\n\r\nexport function * fetchPosts () {\r\n    const response = yield call(PostsAPI.fetchPosts)\r\n\r\n    if (response.err) {\r\n        yield put(PostsAction.setFetchPostsRequestStatus(RequestStatus.ERROR))\r\n    } else {\r\n        yield all([\r\n            put(PostsAction.storePosts(response.data)),\r\n            put(PostsAction.setFetchPostsRequestStatus(RequestStatus.OK))\r\n        ])\r\n    }\r\n}\r\n\r\nexport function * fetchPostDetails ({ postId }) {\r\n    const response = yield call(PostsAPI.fetchPostDetails, {postId})\r\n    if (response.err) {\r\n        yield put(PostsAction.setFetchPostDetailsRequestStatus(RequestStatus.ERROR))\r\n    } else {\r\n        yield all([\r\n            put(PostsAction.storePostDetails(response.data)),\r\n            put(PostsAction.setFetchPostDetailsRequestStatus(RequestStatus.OK))\r\n        ])\r\n    }\r\n}","import { takeLatest, all } from 'redux-saga/effects'\r\n\r\nimport { UsersTypes } from '../Redux/UsersRedux'\r\nimport { PostsTypes } from '../Redux/PostsRedux'\r\nimport { fetchUsers } from './UsersSaga'\r\nimport { fetchPosts, fetchPostDetails } from './PostsSaga'\r\n\r\nexport default function * root () {\r\n    yield all([\r\n        takeLatest(UsersTypes.FETCH_USERS, fetchUsers),\r\n        takeLatest(PostsTypes.FETCH_POSTS, fetchPosts),\r\n        takeLatest(PostsTypes.FETCH_POST_DETAILS, fetchPostDetails)\r\n    ])\r\n}\r\n","import { combineReducers, createStore, applyMiddleware, compose } from 'redux'\r\nimport { connectRouter, routerMiddleware } from 'connected-react-router'\r\nimport createSagaMiddleware from 'redux-saga'\r\n\r\nimport { reducer as UsersRedux } from './UsersRedux'\r\nimport { reducer as PostsRedux } from './PostsRedux'\r\nimport rootSaga from '../Sagas'\r\n\r\n\r\nconst reducers = history => combineReducers({\r\n    router: connectRouter(history),\r\n    usersData: UsersRedux,\r\n    postsData: PostsRedux\r\n})\r\n\r\nconst configureStore = (history, rootReducer, rootSaga) => {\r\n\r\n    const sagaMiddleware = createSagaMiddleware()\r\n    const historyMiddleware = routerMiddleware(history)\r\n    const composeEnchancers = (typeof window !== 'undefined' && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) || compose\r\n    const enchancer = composeEnchancers(\r\n        applyMiddleware(sagaMiddleware),\r\n        applyMiddleware(historyMiddleware)\r\n    )\r\n\r\n    const store = createStore(rootReducer(history), enchancer)\r\n    sagaMiddleware.run(rootSaga)\r\n    \r\n    return store\r\n}\r\n\r\nexport default history => configureStore(history, reducers, rootSaga)\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createBrowserHistory } from 'history'\nimport { Provider, ReactReduxContext } from 'react-redux'\n\nimport CreateStore from './Redux'\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport CarlTestRouter from './routes'\n\nconst history = createBrowserHistory()\nconst store = CreateStore(history)\nconst app = document.getElementById('carl-test')\n\nconst render = Component => ReactDOM.render(\n  <React.StrictMode>\n    <Provider key={Math.random()} store={store} context={ReactReduxContext}>\n    <Component history={history} store={store} context={ReactReduxContext} />\n    </Provider>\n  </React.StrictMode>,\n  app\n);\nrender(CarlTestRouter)","export const POSTS = {\r\n    URI: '/posts',\r\n    LABEL: 'Posts',\r\n    ACTION_TYPE:'/view'\r\n}\r\n\r\nexport const USERS = {\r\n    URI: '/users',\r\n    LABEL: 'Users'\r\n}\r\n\r\nexport const HOME = {\r\n    URI: '/home',\r\n    LABEL: 'Home'\r\n}\r\n\r\nexport const LOGIN = {\r\n    URI: '/login',\r\n    LABEL: 'Login'\r\n}\r\n\r\nexport const LOG_OUT = {\r\n    URI: '/logout',\r\n    LABEL: 'Logout'\r\n}","import React, { Fragment} from 'react'\r\nimport { NavLink } from 'react-router-dom'\r\nimport Nav from 'react-bootstrap/Nav'\r\nimport { withRouter } from 'react-router'\r\nimport * as RoutePaths from '../Entities/RoutePaths'\r\nconst AppNavbar = () => {\r\n    return (\r\n        <Fragment>\r\n            <Nav fill defaultActiveKey={RoutePaths.HOME.URI} className=\"topNav\">\r\n                    <Nav.Item>\r\n                        <NavLink to={RoutePaths.HOME.URI} title={RoutePaths.HOME.LABEL} className=\"nav-link\" activeClassName=\"active\">\r\n                            <span className=\"nav-label\">{RoutePaths.HOME.LABEL}</span>\r\n                        </NavLink>\r\n                    </Nav.Item>\r\n                    <Nav.Item>\r\n                        <NavLink to={RoutePaths.USERS.URI} title={RoutePaths.USERS.LABEL} className=\"nav-link\" activeClassName=\"active\">\r\n                            <span className=\"nav-label\">{RoutePaths.USERS.LABEL}</span>\r\n                        </NavLink>\r\n                    </Nav.Item>\r\n                    <Nav.Item>\r\n                        <NavLink to={RoutePaths.POSTS.URI} title={RoutePaths.POSTS.LABEL} className=\"nav-link\" activeClassName=\"active\">\r\n                            <span className=\"nav-label\">{RoutePaths.POSTS.LABEL}</span>\r\n                        </NavLink>\r\n                    </Nav.Item>\r\n\r\n                    <Nav.Item>\r\n                        <NavLink to={RoutePaths.LOG_OUT.URI} title={RoutePaths.LOG_OUT.LABEL} className=\"nav-link\" activeClassName=\"active\">\r\n                            <span className=\"nav-label\">{RoutePaths.LOG_OUT.LABEL}</span>\r\n                        </NavLink>\r\n                    </Nav.Item>\r\n                </Nav>\r\n        </Fragment>\r\n    )\r\n}\r\nexport default withRouter(AppNavbar)","import React, { Fragment, PureComponent } from 'react'\r\nimport propTypes from 'prop-types'\r\nimport { connect } from 'react-redux'\r\nimport { withRouter } from 'react-router-dom'\r\nimport { Container, Col } from 'react-bootstrap'\r\nimport { push } from 'connected-react-router'\r\n\r\nimport Navbar from '../Components/Navbar'\r\nimport ProfileInfoAction from '../Redux/UsersRedux'\r\nimport * as RequestStatus from '../Entities/RequestStatus'\r\n\r\nclass App extends PureComponent {\r\n\r\n    render() {\r\n        return (\r\n            <Container fluid >\r\n                <div>\r\n                    <Fragment>\r\n                        <div className=\"ct-header\">\r\n                            <Navbar />\r\n                        </div>\r\n                    </Fragment>\r\n                    {('test' === \"test\") && (\r\n                        <Col as=\"main\" className=\"main-container\" sm={12} xs={12} md={12} xl={12}>\r\n                            {this.props.children}\r\n                        </Col>\r\n                    )}\r\n                </div>\r\n            </Container>\r\n        )\r\n    }\r\n}\r\n\r\nApp.propTypes = {\r\n    children: propTypes.oneOfType([\r\n        propTypes.arrayOf(propTypes.node),\r\n        propTypes.node\r\n    ]).isRequired,\r\n    users: propTypes.array.isRequired\r\n}\r\n\r\nconst mapStateToProps = ({\r\n    usersData: {\r\n        users = [],\r\n        fetchUsersRequestStatus,\r\n        fetchUsersErrorMessage,\r\n    }\r\n}) => {\r\n    const { INPROGRESS } = RequestStatus\r\n    return {\r\n        disabledControls: fetchUsersRequestStatus === INPROGRESS,\r\n        users,\r\n        fetchUsersErrorMessage\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    fetchProfile: () => dispatch(ProfileInfoAction.fetchProfile()),\r\n    setFetchProfileRequestStatus: () => dispatch(ProfileInfoAction.setFetchProfileRequestStatus(RequestStatus.OK)),\r\n    storeProfile: profile => dispatch(ProfileInfoAction.storeProfile(profile)),\r\n    navigateTo: (path, params = {}) => dispatch(push(path, params))\r\n})\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(App))\r\n","import React, { PureComponent, Fragment } from 'react'\r\nimport propTypes from 'prop-types'\r\nimport { connect } from 'react-redux'\r\nimport { withRouter } from 'react-router-dom'\r\nimport { push } from 'connected-react-router'\r\nimport Spinner from 'react-bootstrap/Spinner'\r\nimport Row from 'react-bootstrap/Row'\r\nimport Col from 'react-bootstrap/Col'\r\nimport Button from 'react-bootstrap/Button'\r\nimport Form from 'react-bootstrap/Form'\r\nimport Card from 'react-bootstrap/Card'\r\nimport * as RequestStatus from '../Entities/RequestStatus'\r\nimport UsersActions from '../Redux/UsersRedux'\r\nimport * as RoutePaths from '../Entities/RoutePaths'\r\n\r\nclass Login extends PureComponent {\r\n\r\n    state = {\r\n        Authenticated: localStorage.getItem('loginData'),\r\n        loginEmail: '',\r\n        password: '',\r\n        isValidEmail: true,\r\n        validated: false,\r\n        isInvalidCredentials: false\r\n    }\r\n    componentDidMount() {\r\n        const { fetchUsers, navigateTo, match: { path, url }} = this.props\r\n        if (path === RoutePaths.LOG_OUT.URI) {\r\n            localStorage.clear()\r\n            navigateTo(RoutePaths.LOGIN.URI)\r\n            window.location.reload()\r\n        }\r\n        fetchUsers()\r\n    }\r\n\r\n    handleLoginData = (name, value) => {\r\n        this.setState({\r\n            [name]: value,\r\n            isInvalidCredentials: false\r\n        })\r\n    }\r\n\r\n    isValidEmailAddress = () => {\r\n        return !!this.state.loginEmail.match(/.+@.+/);\r\n    }\r\n\r\n    handleSubmit = () => {\r\n        const { loginEmail, password } = this.state\r\n        if (this.state.loginEmail.match(/.+@.+/)  && password.trim() !== '') {\r\n            const user = this.props.users.filter(user => user.email === loginEmail && user.username ===password )\r\n            if(user.length > 0) {\r\n                localStorage.setItem('loginData', JSON.stringify({email: loginEmail, password: password}))\r\n                this.props.navigateTo(RoutePaths.HOME.URI)\r\n                window.location.reload()\r\n            } else {\r\n                this.setState({\r\n                    isInvalidCredentials: true\r\n                })\r\n            }\r\n        } else {\r\n            this.setState({\r\n                isValidEmail: false\r\n            })\r\n        }\r\n    };\r\n\r\n\r\n    render() {\r\n        const { disabledControls, users } = this.props\r\n        const { loginEmail, password, isValidEmail, isInvalidCredentials } = this.state\r\n        const [{ email, username }] = (users.length > 0 && users) || [{ email: '', username: '' }]\r\n        return (\r\n            <Fragment>\r\n                {disabledControls ? (\r\n                    <div className=\"text-center\">\r\n                        <Spinner animation=\"border\" variant=\"primary\" />\r\n                    </div>\r\n                ) : (\r\n                        <Fragment>\r\n                            <Row className=\"mt-5\">\r\n                                <Col sm={4} md={4} xs={12} className=\"ct-login\">\r\n                                    <Card tyle={{ width: '18rem' }}>\r\n                                        <Card.Body>\r\n                                            <Form noValidate validated onSubmit={this.submitLogin}>\r\n                                                <Form.Group controlId=\"formBasicEmail\">\r\n                                                    <Form.Label>Email address</Form.Label>\r\n                                                    <Form.Control\r\n                                                        type=\"email\"\r\n                                                        name=\"loginEmail\"\r\n                                                        value={loginEmail}\r\n                                                        onChange={({ target: { name, value } }) => this.handleLoginData(name, value)}\r\n                                                        onBlur={() => this.setState({\r\n                                                            isValidEmail: this.isValidEmailAddress(this.state.email)\r\n                                                        })}\r\n                                                        required\r\n                                                        placeholder=\"Enter email\"\r\n                                                    />\r\n                                                    {!isValidEmail && (<Form.Control.Feedback type=\"invalid\">\r\n                                                        Please enter a valid email.\r\n                                                    </Form.Control.Feedback>\r\n                                                    )}\r\n                                                </Form.Group>\r\n\r\n                                                <Form.Group controlId=\"formBasicPassword\">\r\n                                                    <Form.Label>Password (Username)</Form.Label>\r\n                                                    <Form.Control\r\n                                                        type=\"password\"\r\n                                                        name=\"password\"\r\n                                                        value={password}\r\n                                                        onChange={({ target: { name, value } }) => this.handleLoginData(name, value)}\r\n                                                        placeholder=\"Password\"\r\n                                                        required\r\n                                                    />\r\n                                                    {password === '' && (\r\n                                                    <Form.Control.Feedback type=\"invalid\">\r\n                                                        Please enter password.\r\n                                                    </Form.Control.Feedback>\r\n                                                    )}\r\n                                                </Form.Group>\r\n                                                <p>{isInvalidCredentials && (<small className=\"text-danger\">Invalid credentials</small>)}</p>\r\n                                                <Form.Text className=\"text-muted\">\r\n                                                    <b>Email</b>: {email} <br />\r\n                                                    <b>Password</b>: {username}\r\n                                                </Form.Text>\r\n                                                <Button className=\"float-right\" size=\"sm\" variant=\"primary\" onClick={this.handleSubmit}>\r\n                                                    Submit\r\n                                        </Button>\r\n                                            </Form>\r\n                                        </Card.Body>\r\n                                    </Card>\r\n                                </Col>\r\n\r\n                            </Row>\r\n                        </Fragment>\r\n                    )}\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nLogin.propTypes = {\r\n    history: propTypes.object,\r\n    disabledControls: propTypes.bool,\r\n    navigateTo: propTypes.func.isRequired,\r\n    fetchUsers: propTypes.func.isRequired\r\n}\r\n\r\nconst mapStateToProps = ({\r\n    usersData: {\r\n        users = [],\r\n        fetchUsersRequestStatus,\r\n        fetchUsersErrorMessage,\r\n    }\r\n}) => {\r\n    const { INPROGRESS } = RequestStatus\r\n    return {\r\n        disabledControls: fetchUsersRequestStatus === INPROGRESS,\r\n        users,\r\n        fetchUsersErrorMessage\r\n    }\r\n}\r\nconst mapDispatchToProps = dispatch => ({\r\n    fetchUsers: () => dispatch(UsersActions.fetchUsers()),\r\n    navigateTo: (path, params = {}) => dispatch(push(path, params))\r\n})\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Login))","export const isObjectWithKey = obj => obj !== null && Object.entries(obj).length > 0 && obj.constructor === Object\r\n\r\nexport const cloneData = data => {\r\n    return JSON.parse(JSON.stringify(data))\r\n}","export const SEARCH_PLACEHOLDER = \"Min 3 characters...\"\r\nexport const SEARCH_TEXT_LENGTH = 3","import React, { Fragment, useState } from 'react'\r\nimport propTypes from 'prop-types'\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport Row from 'react-bootstrap/Row'\r\nimport Col from 'react-bootstrap/Col'\r\nimport Form from 'react-bootstrap/Form'\r\nimport Card from 'react-bootstrap/Card'\r\nimport Button from 'react-bootstrap/Button'\r\nimport * as RoutePaths from '../Entities/RoutePaths'\r\nimport { cloneData } from '../Utils/util'\r\n\r\nimport { SEARCH_PLACEHOLDER, SEARCH_TEXT_LENGTH } from '../Entities/UsersTypes'\r\n\r\nconst PostsList = ({ posts }) => {\r\n\r\n    const postsData = cloneData(posts)\r\n    const [searchText, setSearchText] = useState('')\r\n\r\n    const handlePostsFilter = (text = '') => {\r\n        setSearchText(text)\r\n    }\r\n\r\n    let postList = postsData\r\n    if (searchText.trim().length >= SEARCH_TEXT_LENGTH) {\r\n        const searchPattern = new RegExp(`^${searchText}`, 'i')\r\n        postList = postsData.filter(post => post.title && searchPattern.test(post.title))\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            <Row className=\"mb-2\">\r\n                <Col md={4} sm={4}>\r\n                    <Form.Control\r\n                        size=\"sm\"\r\n                        type=\"text\"\r\n                        value={searchText}\r\n                        onChange={({ target: { value } }) => handlePostsFilter(value)}\r\n                        placeholder={SEARCH_PLACEHOLDER}\r\n                    />\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                {postList.map((post, index) => (\r\n                    <Col key={index} sm={4} md={4}>\r\n                        <Card className=\"mb-2\">\r\n                            <Card.Body>\r\n                                <Card.Title className=\"blog-title\">{post.title}</Card.Title>\r\n\r\n                                <Card.Text className=\"blog-body\">\r\n                                    {post.body}\r\n                                </Card.Text>\r\n                                    <Link\r\n                                        title={post.id}\r\n                                        className=\"pl-0 text-decoration-none\"\r\n                                        to={location => ({\r\n                                            ...location,\r\n                                            pathname: RoutePaths.POSTS.URI + `/${post.id}`\r\n                                        })}\r\n                                    >\r\n                                        <Button variant=\"link\">Link</Button>\r\n                                    </Link>\r\n                            </Card.Body>\r\n                        </Card>\r\n                    </Col>\r\n                ))}\r\n            </Row>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nPostsList.propTypes = {\r\n    posts: propTypes.array.isRequired\r\n}\r\n\r\nexport default PostsList","import React, { PureComponent, Fragment } from 'react'\r\nimport propTypes from 'prop-types'\r\nimport { connect } from 'react-redux'\r\nimport { withRouter } from 'react-router-dom'\r\nimport { push } from 'connected-react-router'\r\nimport Spinner from 'react-bootstrap/Spinner'\r\n\r\nimport PostsActions from '../Redux/PostsRedux'\r\nimport * as RequestStatus from '../Entities/RequestStatus'\r\nimport PostsList from '../Components/PostsList'\r\nimport * as RoutePaths from '../Entities/RoutePaths'\r\n\r\nclass Posts extends PureComponent {\r\n\r\n    state = {\r\n        isToggleEditProfile: false\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.fetchPosts()\r\n    }\r\n\r\n    handlePostViewDetail = postId => {\r\n        const {navigateTo, setPostId} = this.props\r\n        setPostId(setPostId)\r\n        navigateTo(RoutePaths.POSTS.URI + '/' + postId)\r\n    }\r\n\r\n    render() {\r\n        const { disabledControls, posts } = this.props\r\n        return (\r\n            <Fragment>\r\n                {disabledControls ? (\r\n                    <div className=\"text-center\">\r\n                        <Spinner animation=\"border\" variant=\"primary\" />\r\n                    </div>\r\n                ) : (\r\n                        <PostsList posts={posts} onPostClick={this.handlePostViewDetail} />\r\n                    )}\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nPosts.propTypes = {\r\n    history: propTypes.object,\r\n    disabledControls: propTypes.bool,\r\n    posts: propTypes.array.isRequired,\r\n    fetchPosts: propTypes.func.isRequired,\r\n    navigateTo: propTypes.func.isRequired\r\n}\r\n\r\nconst mapStateToProps = ({\r\n    postsData: {\r\n        posts = [],\r\n        fetchPostsRequestStatus,\r\n        fetchPostsErrorMessage,\r\n    }\r\n}) => {\r\n    const { INPROGRESS } = RequestStatus\r\n    return {\r\n        disabledControls: fetchPostsRequestStatus === INPROGRESS,\r\n        posts,\r\n        fetchPostsErrorMessage,\r\n        fetchPostsRequestStatus\r\n    }\r\n}\r\nconst mapDispatchToProps = dispatch => ({\r\n    fetchPosts: () => dispatch(PostsActions.fetchPosts()),\r\n    fetchPostDetails: postId => dispatch(PostsActions.fetchPostDetails(postId)),\r\n    setPostId: postId => dispatch(PostsActions.setPostId(postId)),\r\n    navigateTo: (path, params = {}) => dispatch(push(path, params))\r\n})\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Posts))","import React, { PureComponent, Fragment } from 'react'\r\nimport propTypes from 'prop-types'\r\nimport { connect } from 'react-redux'\r\nimport { withRouter } from 'react-router-dom'\r\nimport { push } from 'connected-react-router'\r\nimport Spinner from 'react-bootstrap/Spinner'\r\nimport Row from 'react-bootstrap/Row'\r\nimport Col from 'react-bootstrap/Col'\r\n\r\nimport PostsActions from '../Redux/PostsRedux'\r\nimport UsersActions from '../Redux/UsersRedux'\r\nimport * as RequestStatus from '../Entities/RequestStatus'\r\nimport * as RoutePaths from '../Entities/RoutePaths'\r\n\r\nclass Home extends PureComponent {\r\n\r\n    componentDidMount() {\r\n        this.props.fetchUsers()\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        const { fetchUsersRequestStatus: prevFetchUsersRequestStatus } = prevProps\r\n        const { fetchUsersRequestStatus, fetchPosts } = this.props\r\n\r\n        if (prevFetchUsersRequestStatus !== fetchUsersRequestStatus && fetchUsersRequestStatus === RequestStatus.OK) {\r\n            fetchPosts()\r\n        }\r\n    }\r\n\r\n    handlePageChange = page => {\r\n        if (page === RoutePaths.USERS.LABEL) {\r\n            this.props.navigateTo(RoutePaths.USERS.URI)\r\n        } else {\r\n            this.props.navigateTo(RoutePaths.POSTS.URI)\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { users, posts, fetchUsersRequestStatus, fetchPostsRequestStatus } = this.props\r\n        return (\r\n\r\n            <Fragment>\r\n                <Row className=\"justify-content-md-center\">\r\n                    <Col className=\"link-div\" sm={3} md={3} xs={3} onClick={() => this.handlePageChange(RoutePaths.USERS.LABEL)}>\r\n                        <div className=\"card card-sm\">\r\n                            <div className=\"card-body\">\r\n                                <div className=\"d-flex justify-content-between mb-5\">\r\n                                    <div>\r\n                                        <span className=\"d-block font-15 text-dark font-weight-500\">Users</span>\r\n                                    </div>\r\n                                </div>\r\n                                {fetchUsersRequestStatus === RequestStatus.INPROGRESS ? (\r\n                                    <div className=\"text-center\">\r\n                                        <Spinner animation=\"border\" variant=\"primary\" />\r\n                                    </div>\r\n                                ) : (\r\n                                        <div className=\"text-center\">\r\n                                            <span className=\"d-block display-4 text-dark mb-5\">{users.length}</span>\r\n                                            <small className=\"d-block\">{users.length} Total Users</small>\r\n                                        </div>\r\n                                    )}\r\n                            </div>\r\n                        </div>\r\n                    </Col>\r\n                    <Col className=\"link-div\" sm={3} md={3} xs={3} onClick={() => this.handlePageChange(RoutePaths.POSTS.LABEL)}>\r\n                        <div className=\"card card-sm\">\r\n                            <div className=\"card-body\">\r\n                                <div className=\"d-flex justify-content-between mb-5\">\r\n                                    <div>\r\n                                        <span className=\"d-block font-15 text-dark font-weight-500\">Posts</span>\r\n                                    </div>\r\n                                </div>\r\n                                {fetchPostsRequestStatus === RequestStatus.INPROGRESS ? (\r\n                                    <div className=\"d-flex align-self-center text-center\">\r\n                                        <Spinner animation=\"border\" variant=\"primary\" />\r\n                                    </div>\r\n                                ) : (\r\n                                        <div className=\"text-center\">\r\n                                            <span className=\"d-block display-4 text-dark mb-5\">{posts.length}</span>\r\n                                            <small className=\"d-block\">{posts.length} Total Posts</small>\r\n                                        </div>\r\n                                    )}\r\n                            </div>\r\n                        </div>\r\n                    </Col>\r\n                </Row>\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nHome.propTypes = {\r\n    history: propTypes.object,\r\n    disabledControls: propTypes.bool,\r\n    fetchUsersRequestStatus: propTypes.string.isRequired,\r\n    fetchPostsRequestStatus: propTypes.string.isRequired,\r\n    \r\n    users: propTypes.array.isRequired,\r\n    posts: propTypes.array.isRequired,\r\n    fetchUsers: propTypes.func.isRequired,\r\n    fetchPosts: propTypes.func.isRequired,\r\n    navigateTo: propTypes.func.isRequired\r\n}\r\n\r\nconst mapStateToProps = ({\r\n    usersData: {\r\n        users = [],\r\n        fetchUsersRequestStatus,\r\n        fetchUsersErrorMessage,\r\n    },\r\n    postsData: {\r\n        posts = [],\r\n        fetchPostsRequestStatus,\r\n        fetchPostsErrorMessage,\r\n    }\r\n}) => {\r\n    const { INPROGRESS } = RequestStatus\r\n    return {\r\n        disabledControls: fetchUsersRequestStatus === INPROGRESS || fetchPostsRequestStatus === INPROGRESS,\r\n        users,\r\n        fetchUsersRequestStatus,\r\n        fetchUsersErrorMessage,\r\n        posts,\r\n        fetchPostsErrorMessage,\r\n        fetchPostsRequestStatus\r\n    }\r\n}\r\nconst mapDispatchToProps = dispatch => ({\r\n    fetchUsers: () => dispatch(UsersActions.fetchUsers()),\r\n    fetchPosts: () => dispatch(PostsActions.fetchPosts()),\r\n    navigateTo: (path, params = {}) => dispatch(push(path, params))\r\n})\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Home))","import React, { Fragment, useState } from 'react'\r\nimport propTypes from 'prop-types'\r\nimport Table from 'react-bootstrap/Table'\r\nimport Row from 'react-bootstrap/Row'\r\nimport Col from 'react-bootstrap/Col'\r\nimport Form from 'react-bootstrap/Form'\r\nimport { SEARCH_PLACEHOLDER, SEARCH_TEXT_LENGTH } from '../Entities/UsersTypes'\r\nimport { cloneData } from '../Utils/util'\r\n\r\nconst UsersTable = ({ users }) => {\r\n\r\n    const usersData = cloneData(users)\r\n    const [searchText, setSearchText] = useState('')\r\n\r\n    const handleUserFilter = (text = '') => {\r\n        setSearchText(text)\r\n    }\r\n\r\n    let usersList = usersData\r\n    if (searchText.trim().length >= SEARCH_TEXT_LENGTH) {\r\n        const searchPattern = new RegExp(`^${searchText}`, 'i')\r\n        usersList = usersData.filter(user => user.name && searchPattern.test(user.name))\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            <Row className=\"mb-2\">\r\n                <Col md={4} sm={4}>\r\n                    <Form.Control\r\n                        size=\"sm\"\r\n                        type=\"text\"\r\n                        value={searchText}\r\n                        onChange={({target: { value }}) => handleUserFilter(value)}\r\n                        placeholder={SEARCH_PLACEHOLDER}\r\n                    />\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col>\r\n                    <Table striped bordered hover>\r\n                        <thead>\r\n                            <tr>\r\n                                <th>#</th>\r\n                                <th>Name</th>\r\n                                <th>Email</th>\r\n                                <th>Phone</th>\r\n                                <th>Company</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {usersList.map((user, index) => (<tr key={index}>\r\n                                <td>{user.id}</td>\r\n                                <td>{user.name}</td>\r\n                                <td>{user.email}</td>\r\n                                <td>{user.phone}</td>\r\n                                <td>{(user.company && user.company.name) || '-'}</td>\r\n                            </tr>)\r\n                            )}\r\n\r\n                        </tbody>\r\n                    </Table>\r\n                </Col>\r\n            </Row>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nUsersTable.propTypes = {\r\n    users: propTypes.array.isRequired\r\n}\r\n\r\nexport default UsersTable","import React, { PureComponent, Fragment } from 'react'\r\nimport propTypes from 'prop-types'\r\nimport { connect } from 'react-redux'\r\nimport { withRouter } from 'react-router-dom'\r\nimport Spinner from 'react-bootstrap/Spinner'\r\n\r\nimport UsersActions from '../Redux/UsersRedux'\r\nimport * as RequestStatus from '../Entities/RequestStatus'\r\nimport UsersTable from '../Components/UsersTable'\r\n\r\nclass Users extends PureComponent {\r\n\r\n    state = {\r\n        isToggleEditProfile: false\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.fetchUsers()\r\n    }\r\n    render() {\r\n        const { users, disabledControls} = this.props\r\n        return (\r\n            <Fragment>\r\n                {disabledControls ? (\r\n                    <div className=\"text-center\">\r\n                        <Spinner animation=\"border\" variant=\"primary\" />\r\n                    </div>\r\n                ) : (\r\n                        <UsersTable users={users} />\r\n                    )}\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nUsers.propTypes = {\r\n    history: propTypes.object,\r\n    disabledControls: propTypes.bool.isRequired,\r\n    users: propTypes.array.isRequired,\r\n    fetchUsers: propTypes.func.isRequired\r\n}\r\n\r\nconst mapStateToProps = ({\r\n    usersData: {\r\n        users = [],\r\n        fetchUsersRequestStatus,\r\n        fetchUsersErrorMessage,\r\n    }\r\n}) => {\r\n    const { INPROGRESS } = RequestStatus\r\n    return {\r\n        disabledControls: fetchUsersRequestStatus === INPROGRESS,\r\n        users,\r\n        fetchUsersErrorMessage\r\n    }\r\n}\r\nconst mapDispatchToProps = dispatch => ({\r\n    fetchUsers: () => dispatch(UsersActions.fetchUsers())\r\n})\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Users))","import React, { PureComponent, Fragment } from 'react'\r\nimport propTypes from 'prop-types'\r\nimport { connect } from 'react-redux'\r\nimport { withRouter } from 'react-router-dom'\r\nimport { Link } from 'react-router-dom'\r\nimport { push } from 'connected-react-router'\r\nimport Spinner from 'react-bootstrap/Spinner'\r\nimport Row from 'react-bootstrap/Row'\r\nimport Col from 'react-bootstrap/Col'\r\nimport Card from 'react-bootstrap/Card'\r\nimport Button from 'react-bootstrap/Button'\r\n\r\nimport PostsActions from '../Redux/PostsRedux'\r\nimport * as RequestStatus from '../Entities/RequestStatus'\r\nimport * as RoutePaths from '../Entities/RoutePaths'\r\nimport { isObjectWithKey } from '../Utils/util'\r\n\r\nclass PostDetails extends PureComponent {\r\n\r\n    state = {\r\n        isToggleEditProfile: false\r\n    }\r\n\r\n    componentDidMount() {\r\n        const { fetchPostDetails, match: { params: { postId } }, navigateTo } = this.props\r\n        if (postId) {\r\n            fetchPostDetails(postId)\r\n        } else {\r\n            navigateTo(RoutePaths.POSTS.URI)\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        const { disabledControls, postDetails } = this.props\r\n        return (\r\n            <Fragment>\r\n                {disabledControls ? (\r\n                    <div className=\"d-flex align-self-center\">\r\n                        <Spinner animation=\"border\" variant=\"primary\" />\r\n                    </div>\r\n                ) : (\r\n                        <Fragment>\r\n                            <Row className=\"mx-auto\">\r\n                            <Col sm={12} md={12} xs={12}> \r\n                            <Link\r\n                                        title=\"Post\"\r\n                                        className=\"pl-0 text-decoration-none\"\r\n                                        to={location => ({\r\n                                            ...location,\r\n                                            pathname: RoutePaths.POSTS.URI\r\n                                        })}\r\n                                    >\r\n                                        <Button className=\"float-right\" size=\"sm\" variant=\"link\"> Go Back</Button> \r\n                                    </Link>\r\n                             \r\n                            </Col>\r\n                                {isObjectWithKey(postDetails) && (<Col sm={12} md={12} xs={12}>\r\n                                    <Card>\r\n                                        <Card.Body>\r\n                                            <Card.Title>Card Title</Card.Title>\r\n                                            <Card.Subtitle className=\"mb-2 text-muted\">{postDetails.title}</Card.Subtitle>\r\n                                            <Card.Text>{postDetails.body}</Card.Text>\r\n                                        </Card.Body>\r\n                                    </Card>\r\n                                </Col>\r\n                                )}\r\n                            </Row>\r\n                        </Fragment>\r\n                    )}\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nPostDetails.propTypes = {\r\n    history: propTypes.object,\r\n    disabledControls: propTypes.bool,\r\n    postDetails: propTypes.object.isRequired,\r\n    navigateTo: propTypes.func.isRequired,\r\n    fetchPostDetails: propTypes.func.isRequired\r\n}\r\n\r\nconst mapStateToProps = ({\r\n    postsData: {\r\n        postDetails = {},\r\n        fetchPostDetailsRequestStatus,\r\n        fetchPostDetailsErrorMessage,\r\n    }\r\n}) => {\r\n    const { INPROGRESS } = RequestStatus\r\n    return {\r\n        disabledControls: fetchPostDetailsRequestStatus === INPROGRESS,\r\n        postDetails,\r\n        fetchPostDetailsRequestStatus,\r\n        fetchPostDetailsErrorMessage\r\n    }\r\n}\r\nconst mapDispatchToProps = dispatch => ({\r\n    fetchPostDetails: postId => dispatch(PostsActions.fetchPostDetails(postId)),\r\n    navigateTo: (path, params = {}) => dispatch(push(path, params))\r\n})\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(PostDetails))","import React, { PureComponent, Fragment } from 'react'\r\nimport propTypes from 'prop-types'\r\nimport { Switch, Route, Router, Redirect } from 'react-router'\r\nimport { connect } from 'react-redux'\r\nimport { ConnectedRouter } from 'connected-react-router'\r\n\r\nimport App from './Containers/App'\r\nimport Login from './Containers/Login'\r\nimport Posts from './Containers/Posts'\r\nimport Home from './Containers/Home'\r\nimport Users from './Containers/Users'\r\nimport PostDetails from './Containers/PostDetails'\r\nimport * as RoutePaths from './Entities/RoutePaths'\r\n\r\nclass CarlTestRouter extends PureComponent {\r\n\r\n    state = {\r\n        loginClicked: false,\r\n        Authenticated: localStorage.getItem('loginData')\r\n    }\r\n\r\n    getRouting = () => {\r\n        const { history } = this.props\r\n\r\n        return (\r\n            <ConnectedRouter history={history}>\r\n                <App>\r\n                    <Switch>\r\n                        <Route name={RoutePaths.LOGIN.LABEL} exact path={RoutePaths.LOGIN.URI}>\r\n                            {this.state.Authenticated ? (\r\n                                <Redirect to={RoutePaths.HOME.URI} />\r\n                            ) : (\r\n                                <Redirect to={RoutePaths.LOGIN.URI} />\r\n                            )}\r\n                        </Route>\r\n                        <Route name={RoutePaths.HOME.LABEL} path={RoutePaths.HOME.URI} component={Home} />\r\n                        <Route name={RoutePaths.USERS.LABEL} path={RoutePaths.USERS.URI} component={Users} />\r\n                        <Route name={RoutePaths.POSTS.LABEL} exact path={RoutePaths.POSTS.URI} component={Posts} />\r\n                        <Route name={RoutePaths.LOG_OUT.LABEL} path={RoutePaths.LOG_OUT.URI} component={Login} />\r\n                        <Route\r\n                            name={RoutePaths.POSTS.LABEL}\r\n                            path={RoutePaths.POSTS.URI + '/:postId'}\r\n                            component={PostDetails}\r\n                        />\r\n                    </Switch>\r\n                </App>\r\n            </ConnectedRouter>\r\n        )\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <Fragment>\r\n                {(this.state.Authenticated === null) ? (\r\n                    <Router history={this.props.history}>\r\n                        <Login history={this.props.history}/>\r\n                    </Router>\r\n                ) : (\r\n                <Fragment>\r\n                    {this.getRouting()}\r\n                </Fragment>\r\n                )}\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nCarlTestRouter.propTypes = {\r\n    history: propTypes.object\r\n}\r\n\r\nconst mapStateToProps = ({\r\n    usersData: {\r\n        users = []\r\n    }\r\n}) => ({\r\n    users\r\n})\r\n\r\nexport default connect(mapStateToProps)(CarlTestRouter)"],"sourceRoot":""}